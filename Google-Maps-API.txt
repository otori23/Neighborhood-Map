1) API KEY

- don't necessarily need one
- but good idea to use one, to track your apps stats

2) <script ... async ...>

- don't block DOM construction as script is loaded
- must supply a call back that is invoked when script is loaded 

3) <script ... defer ...>

- don't execute script unitl after page has loaded

4) <div>

- takes width and height of containing elements
- so empty div has width:0 and height:0
- set map div width and height to 100% for map based app
- some older browsers might complain using 100% values, so set in px in this case
- i.e. detect browser and set width, height accordingly
- https://developers.google.com/maps/documentation/javascript/basics#Mobile
 
5) <meta name="viewport" content="initial-scale=1.0, user-scalable=no" />

- on mobile devices, can zoom in/on maps

6) map options: zoom and center

- map options required on creation

6a) map options: others

- explicitly enable/disable map controls and set thier properties
- disableDefaultUI: use to turn on/off map UI defaults
- mapXXXControl/mapXXXControlOptions: expilicitly add and configure a map control

7) Custom Controls

- a control is simply a <div> element which has an absolute position on the map, 
- it displays some UI to the user, ... 
- and handles interaction with either the user or the map, usually through an event handler

7a) Custom Controls: Desing Pattern

- create a div to hold the control
- set CSS for the control border
- set CSS for the control interior
- setup the DOM event listener for control (google.maps.event.addDomListener or domElement.addEventListener)
- add control to map at a particular position

8) Browser's Supported DOM events

- https://en.wikipedia.org/wiki/DOM_events

9) Control Positioning

- https://google-developers.appspot.com/maps/documentation/javascript/examples/full/control-positioning-labels

10) Events

- there are two types of events: user events and MVC state change events
- register for events using mapObjectModel.addListener()
- https://developers.google.com/maps/documentation/javascript/events#EventsOverview

10a) User Events

- inputs from user
- map api events are distinct from standard DOM events

10b) MVC state change events

- change in map api data models

10c) User vs. MVC State change events

User events and MVC state changes may look similar, but you generally wish to treat them differently in your code. MVC events, for example, do not pass arguments within their event. You will want to inspect the property that changed on an MVC state change by calling the appropriate getProperty method on that object.


11) Using Closures in Event Listeners

A "closure" is an expression (typically a function) that can have free variables together with an environment that binds those variables (that "closes" the expression).

11a) Closures

- allows inner functions to access outer variables
- useful within event listeners to access variables not normally attached to the objects on which events occur
- http://www.jibbering.com/faq/faq_notes/closures.html

12) Listening to DOM Events

- The Google Maps JavaScript API event model creates and manages its own custom events. 
- However, the DOM (Document Object Model) within the browser also creates and dispatches its own events, according to the particular browser event model in use.
- If you wish to capture and respond to these (DOM) events, the Maps API provides the addDomListener() static method to listen to and bind to DOM events.

13) Removing Event Listeners

- can remove event listeners individually
- can remove all event listeners in a particular maps object
- can remove all event listeners of a particular type in a particular maps object

14) MapType

- interface that defines the display and usage of map tiles...
- and the translation of coordinate systems from screen coordinates to world coordinates (on the map).
- each Map object maintains a MapTypeRegistry which contains the collection of available MapTypes for that map

15) Basic Map Types

the following map types are available in the Google Maps API:

- MapTypeId.ROADMAP:	displays the default road map view. This is the default map type.
- MapTypeId.SATELLITE:	displays Google Earth satellite images
- MapTypeId.HYBRID:	displays a mixture of normal and satellite views
- MapTypeId.TERRAIN:	displays a physical map based on terrain information.

15a) Customs Map Types

- can create your own custom map types
- means creating a class that implements the MapType interface.

15b) Stand alone  map type

- totally new MapType to replace one of the basic mapTypes (cumbersome)

15c) Overlay Map Type

- designed to work with one of the basic map types (overlay map
- os overlaid on top of a basic map type

15d) Image Map Type

- think of as abstract base class for creating your stand alone map type
- gives you some code, so you are not starting from scratch
- customize to fit you needs


16) Projections

- a mapping of latitude/longitude values (world coords) into coordinates on the projection's map (pixels)
- Google Maps uses the Mercator projection
- implement Projection interface to define your own

17) Signed-In maps

- specify you want a signed in map using a option parameter when you load the map api
- allow users to save places; they can view later in any other google map application


18) Styled Maps

- can apply styles to the basic map types to customise them
- allow you to customize the presentation of the standard Google base maps
- can change the visual display of such elements as roads, parks, and built-up areas

19) Two ways to apply style to a map

- both apporaches use array of MapTypeStyle objects to apply a style to the map

19a) Set style property in mapOptions on map creation

- this changes the style of the standard map type

19b) Create a StyledMapType and apply to map

- this creates a new map type, which can be selected from the map type control

20) MapTypeStyle object

- composed of selectors and stylers

20a) Selectors

- specify what map components should be selected for styling
- map features are the geographic elements that can be targeted on the map
- these include roads, parks, bodies of water, and more, as well as their labels.

20b) Stylers

- specify the visual modification of those elements
- they define the display color through a combination of hue, color, and lightness/gamma values

21) Map Features (MapTypeStyleFeatureType, MapTypeStyleElementType)

- map features represent in maps api as a tree structure
- the feature "all" is at the root of the tree
- select feature using a combimation of feature selectors and element selectors for that feature

21a) Selects all features on a map

{
  featureType: "all"
}

21b) Selects all the roads on a map

{
  featureType: "road"
} 

21c) Selects labels for all local roads

{
  featureType: "road.local",
  elementType: "labels"
}

22) Stylers (MapTypeStyler)

- sepcify visual properties of map features

22a) MapTypeStyler Options

- hue (an RGB hex string) indicates the basic color.

- lightness (a floating point value between -100 and 100) indicates the percentage change in brightness of the element

- saturation (a floating point value between -100 and 100) indicates the percentage change in intensity of the basic color to apply to the element

- gamma (a floating point value between 0.01 and 10.0, where 1.0 applies no correction) indicates the amount of gamma correction to apply to the element

- invert_lightness (if true) simply inverts the existing lightness

- visibility (on, off, or simplified) indicates whether and how the element appears on the map

- color (an RGB hex string) sets the color of the feature

- weight (an integer value, greater than or equal to zero) sets the weight of the feature, in pixels

23) Representing a Features Color - 2 methods

- color (RGB) 
- hue, saturation, lightness (HSL)
- or a conbinations of both

23a) use color option in MapTypeStyler (RGB)

- select color with a hex code 

23b) use combination of hue, saturation, and lightness (HSL)

24) The Hue, Saturation, Lightness, Model

- Hue: indicates the basic color

- Saturation: indicates the intensity of that color 
(0-100: black - color specified by hue)

- Lightness indicates the relative amount of white or black in the constituent color
(0-100: black - color spcified by hue - white)

24a) vs. RGB model

- diffrent from RGB model
- to specify Black in HSL, Hue: <<anything>, Saturation: <<anything>>, Lightness: 0
- to specify White in HSL, Hue: <<anything>, Saturation: <<anything>>, Lightness: 100

25) The Style Map Wizard

- http://googlemaps.github.io/js-samples/styledmaps/wizard/index.html

Creating styles by hand and testing your code to see how they look is potentially time-consuming. Instead, you can use the Styled Map Wizard to set up the JSON for your map's styles. The wizard allows you to select features and their elements, apply operations to those features, and save the styles to JSON, which you can copy and paste into your application.

