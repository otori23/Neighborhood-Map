1) API KEY

- don't necessarily need one
- but good idea to use one, to track your apps stats

2) <script ... async ...>

- don't block DOM construction as script is loaded
- must supply a call back that is invoked when script is loaded 

3) <script ... defer ...>

- don't execute script unitl after page has loaded

4) <div>

- takes width and height of containing elements
- so empty div has width:0 and height:0
- set map div width and height to 100% for map based app
- some older browsers might complain using 100% values, so set in px in this case
- i.e. detect browser and set width, height accordingly
- https://developers.google.com/maps/documentation/javascript/basics#Mobile
 
5) <meta name="viewport" content="initial-scale=1.0, user-scalable=no" />

- on mobile devices, can zoom in/on maps

6) map options: zoom and center

- map options required on creation

6a) map options: others

- explicitly enable/disable map controls and set thier properties
- disableDefaultUI: use to turn on/off map UI defaults
- mapXXXControl/mapXXXControlOptions: expilicitly add and configure a map control

7) Custom Controls

- a control is simply a <div> element which has an absolute position on the map, 
- it displays some UI to the user, ... 
- and handles interaction with either the user or the map, usually through an event handler

7a) Custom Controls: Desing Pattern

- create a div to hold the control
- set CSS for the control border
- set CSS for the control interior
- setup the DOM event listener for control (google.maps.event.addDomListener or domElement.addEventListener)
- add control to map at a particular position

8) Browser's Supported DOM events

- https://en.wikipedia.org/wiki/DOM_events

9) Control Positioning

- https://google-developers.appspot.com/maps/documentation/javascript/examples/full/control-positioning-labels

10) Events

- there are two types of events: user events and MVC state change events
- register for events using mapObjectModel.addListener()
- https://developers.google.com/maps/documentation/javascript/events#EventsOverview

10a) User Events

- inputs from user
- map api events are distinct from standard DOM events

10b) MVC state change events

- change in map api data models

10c) User vs. MVC State change events

User events and MVC state changes may look similar, but you generally wish to treat them differently in your code. MVC events, for example, do not pass arguments within their event. You will want to inspect the property that changed on an MVC state change by calling the appropriate getProperty method on that object.


11) Using Closures in Event Listeners

A "closure" is an expression (typically a function) that can have free variables together with an environment that binds those variables (that "closes" the expression).

11a) Closures

- allows inner functions to access outer variables
- useful within event listeners to access variables not normally attached to the objects on which events occur
- http://www.jibbering.com/faq/faq_notes/closures.html

12) Listening to DOM Events

- The Google Maps JavaScript API event model creates and manages its own custom events. 
- However, the DOM (Document Object Model) within the browser also creates and dispatches its own events, according to the particular browser event model in use.
- If you wish to capture and respond to these (DOM) events, the Maps API provides the addDomListener() static method to listen to and bind to DOM events.

13) Removing Event Listeners

- can remove event listeners individually
- can remove all event listeners in a particular maps object
- can remove all event listeners of a particular type in a particular maps object