1) Overlays

- items you can draw/place on map
- Overlays are objects on the map that are tied to latitude/longitude coordinates, so they move when you drag or zoom the map

2) Type of overlays

- Markers (Icons)
- Info Window
- Shapes (lines, ploylines, polygons, etc) (Raster Image)
- Symbols (SVG based images)
- Ground Overlays
- Custom Overlays

3) Markers (google.maps.Marker)

- identifies a location in a map
- markers that display a custom image are called icons
- give it options at time of creations, e.g. var marker = new googe.maps.Marker({map: foo});
- or set options after creations, e.g. marker.setMap(map)

4) Add a Marker

- var marker = new googe.maps.Marker({map: foo});
- or marker.setMap(map)

5) Remove a Marker

- marker.setMap(null); // removes marker from the map
- marker = null; // to remove object from script

6) Animate a marker (google.maps.Animation)

- to specify the way a marker is animated, use the marker's animation property

6a) Markers animtaion property values

- DROP: 

indicates that the marker should drop from the top of the map to its final location when first placed on the map. Animation will cease once the marker comes to rest and animation will revert to null

- BOUNCE 

indicates that the marker should bounce in place. A bouncing marker will continue bouncing until its animation property is explicitly set to null.

6b) marker.setAnimation and marker.getAnimation

- setter and getter for animation property

7) Customize marker image

- use 'label' MarkerOption to add single character to image
- use icon MarkerOption to use custom image image for marker
- can define more complex icons on the marker using shapes/points/size objects in maps api or svg elemetns
assigned to 'icon' property of marker

8) MarkerImage vs Icon

- Icon object literal now replaces MarkerImage object

9) Symbols

- In addition to raster images, a marker supports the display of vector paths called Symbols
- To display a vector path, pass a Symbol object literal with the desired path to the marker's icon property. 

10) Make a marker draggable

To allow users to drag a marker to a different location on the map, set draggable to true in the marker options.

11) InfoWindow and InfoWindowOptions

- displays content (usually text or images) in a popup window above the map, at a given location
- has a content area and a tapered stem
- the tip of the stem is attached to a specified location on the map
- typically you will attach an info window to a marker, but you can also attach an info window to a specific latitude/longitude 

12) Add an info window

- content of the InfoWindow may contain a string of text, a snippet of HTML, or a DOM element
- to set the content, either specify it within the InfoWindowOptions or call setContent() on the InfoWindow explicitly

13) InfoWindow best practices

- only one info window should be open on the map at any one time
-  create just one InfoWindow object and open it at different locations or markers upon map events, such as user clicks
14) Open an info window

- call the open() method on the InfoWindow, passing it the Map on which to open, and optionally, the Marker with which to anchor it. If no marker is provided, the info window will open at its position property.


15) Close an info window

By default, an InfoWindow remains open until the user clicks the close control (a cross at top right of the info window). If you wish, you can close the info window explicitly by calling its close() method.

16) Move an info window (2 ways)

- Call setPosition() on the info window, or

-Attach the info window to a new marker using the InfoWindow.open() method.

17) Shapes

18) Polyline, PolylineOptions

- can add vector-based images to a polyline in the form of symbols. With a combination of symbols and the PolylineOptions class, you have a lot of control over the look and feel of polylines on your map

18a) Add a polyline

- specify a set of points (LatLng object) in the 'path' option for the polyline

19) Polygon, PolygonOptions

- similar to ployline but add specification of fill option (in addition to stroke)
- can describe complex shapes

19a) Add a polygon

Because a polygonal area may include several separate paths, the Polygon object's paths property specifies an array of arrays, each of type MVCArray. Each array defines a separate sequence of ordered LatLng coordinates.

For simple polygons consisting of only one path, you can construct a Polygon using a single array of LatLng coordinates. 

20) Rectangle

- Unlike a Polygon, you do not define paths for a Rectangle. 
- Instead, a rectangle has a bounds property which defines its shape by specifying a google.maps.LatLngBounds for the rectangle.

21) Cirlce

- Unlike a Polygon, you do not define paths for a Circle. 

- Instead, a circle has two additional properties which define its shape:
center specifies the google.maps.LatLng of the center of the circle.
radius specifies the radius of the circle, in meters. 

22) Edittable/Draggable

- any shape can be set as user-editable, by setting editable/draggable to true in the shape's options.

23) Geodesic

When enabling dragging on a polygon or polyline, you should also consider making the polygon or polyline geodesic, by setting its geodesic property to true.

A geodesic polygon will retain its true geographic shape when it is moved, causing the polygon to appear distorted as it is moved north or south in the Mercator projection. Non-geodesic polygons will always retain their initial appearance on the screen.

The symbol's shape is defined by a path using SVG path notation. While path is the only required property, the Symbol object supports a variety of properties allowing you to customize visual aspects, such as the color and weight of the stroke and fill. See the list of properties below.

Several predefined symbols are available via the SymbolPath class. See the list below.

24) Symbol

- a Symbol is a vector-based image that can be displayed on a Marker or a Polyline object
- the symbol's shape is defined by a path using SVG path notation
- while path is the only required property, the Symbol object supports a variety of properties allowing you to customize visual aspects, such as the color and weight of the stroke and fill
- several predefined symbols are available via the SymbolPath class

25) SVG path notation

- the M indicates a moveto, the Ls indicate linetos, and the z indicates a closepath

26) Add Symbol to Marker or Polyline

- set icon property of marker as the Symbol object
- set icons (an array of icons) property of the polyline (polyline provides path along which to drqw symbol(s))

26a) get, set

- note general get/set methods for accessing google maps api object properties

27) GroundOverlay

The constructor for a GroundOverlay specifies a URL of an image and the LatLngBounds of the image as parameters. The image will be rendered on the map, constrained to the given bounds, and conformed using the map's projection.

28) Custom Overlays (OverlayView)

- OverlayView base class to extend when you creating your won overlay
- override the methods: onAdd(), draw(), and onRemove()