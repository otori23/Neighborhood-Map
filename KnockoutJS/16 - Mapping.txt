
1) Mapping

https://github.com/SteveSanderson/knockout.mapping/tree/master/build/output

- KO mapping plugin gives you a straightforward way to map that plain JavaScript object into a view model with the appropriate observables

- this is an alternative to manually writing your own JavaScript code that constructs a view model based on some data you’ve fetched from the server

2) Create a view model via the mapping plugin

- var viewModel = ko.mapping.fromJS(data);
- data is plain JS say created from JSON response from a remote service

3) Update view model when new data is available

// Every time data is received from the server:
ko.mapping.fromJS(data, viewModel);

4) Unmapping

- to convert your mapped object back to a regular JS object, use:

var unmapped = ko.mapping.toJS(viewModel);

- this will create an unmapped object containing only the properties of the mapped object that were part of your original JS object

- any properties or functions that you manually added to your view model are ignored

- by default, the only exception to this rule is the _destroy property which will also be mapped back, because it is a property that Knockout may generate when you destroy an item from an ko.observableArray

5) Working with JSON strings: ko.mapping.fromJSON 

If your Ajax call returns a JSON string (and does not deserialize it into a JavaScript object), then you can use the function ko.mapping.fromJSON to create and update your view model instead. To unmap, you can use ko.mapping.toJSON

6) More control over mapping

... 

- go to docs for more details



 