
1) The data-bind syntax

- Knockout’s declarative binding system provides a concise and powerful way to link data to the UI
- to understand complex bindings, it is better to understand the behavior and syntax of Knockout’s binding system
- A binding consists of two items, the binding name and value, separated by a colon
- An element can include multiple bindings (related or unrelated), with each binding separated by a comma

2) Binding names

- The binding name should generally match a registered binding handler (either built-in or custom), ... 
- or be a parameter for another binding
- If the name matches neither of those, Knockout will ignore it (without any error or warning)
- So if a binding doesn’t appear to work, first check that the name is correct

3) Binding values

- a binding value can be a 
	-- single value 
	-- variable
	-- literal
	-- almost any valid JavaScript expression

==== Examples ====

<!-- variable (usually a property of the current view model -->
<div data-bind="visible: shouldShowMessage">...</div>
 
<!-- comparison and conditional -->
The item is <span data-bind="text: price() > 50 ? 'expensive' : 'cheap'"></span>.
 
<!-- function call and comparison -->
<button data-bind="enable: parseAreaCode(cellphoneNumber()) != '555'">...</button>
 
<!-- function expression -->
<div data-bind="click: function (data) { myFunction('param1', data) }">...</div>
 
<!-- object literal (with unquoted and quoted property names) -->
<div data-bind="with: {emotion: 'happy', 'facial-expression': 'smile'}">...</div>

4) Whitespace

- bindings can include any amount of whitespace (spaces, tab, and newlines)
- you’re free to use it to arrange your bindings as you like

5) Skipping the binding value

- starting with Knockout 3.0, you can specify bindings without a value, which will give the binding an undefined value
- this ability is especially useful when paired with binding preprocessing, which can assign a default value for a binding

6) Binding context

- a binding context is an object that holds data that you can reference from your bindings
- while applying bindings, Knockout automatically creates and manages a hierarchy of binding contexts
- the root level of the hierarchy refers to the viewModel parameter you supplied to ko.applyBindings(viewModel)
- then, each time you use a control flow binding such as with or foreach, that creates a child binding context that refers to the nested view model data

6a) Binding context object vs the object in the view model

- not same
- binding context object = the object in view model ($data) + other special properties

7) Special properties in binding contexts

7a) $parent

- this is the view model object in the parent context

7b) $parents

- $parents[0] is the view model from the parent context (i.e., it’s the same as $parent)
- $parents[1] is the view model from the grandparent context
- $parents[2] is the view model from the great-grandparent context

7c) $root

- object that was passed to ko.applyBindings
- it is equivalent to $parents[$parents.length - 1]

7d) $component

- if you’re within the context of a particular component template, then $component refers to the viewmodel for that component
- it’s the component-specific equivalent to $root

7e) $data

- this is the view model object in the current context
- in the root context, $data and $root are equivalent 

7f) $index (only available within foreach bindings)

- this is the zero-based index of the current array entry being rendered by a foreach binding

7g) $parentContext

- this refers to the binding context object at the parent level
- this is different from $parent, which refers to the data (not binding context) at the parent level

7h) $rawData

- this is the raw view model value in the current context
- usually this will be the same as $data

7i) $componentTemplateNodes

- if you’re within the context of a particular component template, then $componentTemplateNodes is an array containing any DOM nodes that were passed to that component

7j) $context

- this refers to the current binding context object
- this may be useful if you want to access properties of the context when they might also exist in the view model

7k) $element

- this is the element DOM object of the current binding
- for virtual elements, it will be the comment DOM object