
1) Observable Arrays

- If you want to detect and respond to changes of a collection of things, use an observableArray

- this is useful in many scenarios where you’re displaying or editing multiple values and need repeated sections of UI to appear and disappear as items are added and removed.

- key point: An observableArray tracks which objects are in the array, not the state of those objects

- An observableArray just tracks which objects it holds, and notifies listeners when objects are added or removed

1a) Observale Arrays are just KO Observables

- Behind the scenes, an observableArray is actually an observable whose value is an array
- So, you can get the underlying JavaScript array by invoking the observableArray as a function with no parameters, just like any other observable

2) Example

var myObservableArray = ko.observableArray();    // Initially an empty array
myObservableArray.push('Some value');            // Adds the value and notifies observers

2a) Prepopulating an observableArray

// This observable array initially contains three objects
var anotherObservableArray = ko.observableArray([
    { name: "Bungle", type: "Bear" },
    { name: "George", type: "Hippo" },
    { name: "Zippy", type: "Unknown" }
]);

3) Observable array Operations

- can access underlying native js array and operate on it; BUT DON'T
- better to use operations on more abstract KO ObservableArray
- the observableaArray offers better cross-browser support for operations- if these operations add/remove elements from array, then events is fired off to listeners


3a) Operations that don't mutate the observable array (native js arrays have same methods)


- indexOf: returns the index of the first array item that equals your parameter (-1 if not present)
- slice
: returns the entries of your array from a given start index up to a given end index

3b) Manipulating an observableArray (native js arrays have same methods)

- myObservableArray.push('Some new value') adds a new item to the end of array
- myObservableArray.pop() removes the last value from the array and returns it
- myObservableArray.unshift('Some new value') inserts a new item at the beginning of the array
- myObservableArray.shift() removes the first value from the array and returns it
- myObservableArray.reverse() reverses the order of the array
- myObservableArray.sort() sorts the array contents; can prive a comparator
- myObservableArray.splice() removes and returns a given number of elements starting from a given index

3c) Useful ObservableArray methods with no native JS counterpart

- myObservableArray.remove(someItem) removes all values that equal someItem and returns them as an array
- myObservableArray.remove(function(item) { return item.age < 18 }) removes all values whose age property is less than 18, and returns them as an array
- myObservableArray.removeAll(['Chad', 132, undefined]) removes all values that equal 'Chad', 123, or undefined and returns them as an array
- myObservableArray.removeAll() removes all values and returns them as an array

3d) destroy and destroyAll (Note: Usually relevant to Ruby on Rails developers only)

- myObservableArray.destroy(someItem)
- myObservableArray.destroy(function(someItem) { return someItem.age < 18 })
- myObservableArray.destroyAll(['Chad', 132, undefined])
- myObservableArray.destroyAll()

- the above methods the same thing as their 'remove' counter parts
- but in addition, they add the property, _destroy = true, to the js objects they return
- when the view model objects get returned to the server-side rails app (as JSON)
- the rails app converts the JSON into ActiveRecord objects\
- and issues the correct INSERT or UPDATE or DELETE statements to the database

- on client (browser) object with _destroy = true will canish from UI immediately
- later when object is submitted to server, the server app will delete object from database

4) Delaying and/or suppressing change notifications

// Ensure it notifies about changes no more than once per 50-millisecond period
myViewModel.myObservableArray.extend({ rateLimit: 50 }); 
 
 
